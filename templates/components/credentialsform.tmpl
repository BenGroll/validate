<style>
    input:focus {
        outline: none;
    }

    input[type=text] {
        width: 100%;
        padding: 12px 20px;
        margin: 8px 0;
        box-sizing: border-box;
    }

    input.invalid {
        border: 2px solid red;
        border-radius: 4px;
    }
    input.invalid:focus {
        border: 4px solid red;
        border-radius: 4px;
    }
    input.valid {
        border: 2px solid green;
        border-radius: 4px;
    }
    input.valid:focus {
        border: 4px solid green;
        border-radius: 4px;
    }
    .feedback {
        font-size: 1.3rem;
        font-style: italic;
        text-align: left;
        list-style: disc;
        list-style-position: inside;
        max-width: 400px;
        margin: 10px auto;
        color: rgb(255, 0, 0);
    }
</style>
<form action="/" method="GET" id="credentials" >
    <div class="input-control">
        <label for="name">
            <span>Name</span>
        <input id="name" name="name" type="text" class="invalid" required minlength="<TMPL_VAR NAME='unamelength'>">
        <ul id="name-requirements" class="feedback"></ul>
        </label>
    </div>
    <div class="input-control">
        <label for="pword">
            <span>Password</span>
        <input id="pword" name="pword" type="text" class="invalid" required minlength="<TMPL_VAR NAME='pwordlength'>">
        <ul id="pword-requirements" class="feedback"></ul>
        </label>
    </div>
    <div class="input-control">
        <label for="repeat">
            <span>Password (again)</span>
        <input id="repeat" name="repeat" type="text" class="invalid" required>
        <ul id="repeat-requirements" class="feedback"></ul>
        </label>
    </div>
    <button type="submit" style="padding: 10px; margin-top: 10px; width: 100%;">Submit</button>
</form>

<script defer>
const nameEl = document.getElementById('name');
const nameerrorEl = document.getElementById('name-requirements');
const passwordEl = document.getElementById('pword');
const passworderrorEl = document.getElementById('pword-requirements');
const repeatEl = document.getElementById('repeat');
const repeaterrorEl = document.getElementById('repeat-requirements');

const validationConfig = JSON.parse('<TMPL_VAR NAME="config">');

// Functions to refresh the different Inputfields' errorMessages
function refreshRepeatedPassword(e = null) {
    if(repeatEl.value == passwordEl.value) {
        repeatEl.classList.add('valid');
        repeatEl.classList.remove('invalid');
        repeaterrorEl.innerHTML = null;
        repeatEl.setCustomValidity("")
    } else {
        e.preventDefault();
        repeaterrorEl.innerHTML = "Has to match Password";
        repeatEl.setCustomValidity("Has to match Password");

        repeatEl.classList.add('invalid');
        repeatEl.classList.remove('valid');
    } 
}

function refreshPassword(e = null) {

    function messages2list(messages) {
        let listitems = [];
        messages.forEach(element => {
            listitems.push("<li>" + element + "</li>");
        });
        return listitems;
    }
    let messages = [];
    let attemptvalue = passwordEl.value;
    let config = validationConfig;

    // Different Verifications
    if(config.hasOwnProperty("minimum_length") && config["minimum_length"]["use"] === 1) {
        let errors = validate_minimum_length(attemptvalue, parseInt(config["minimum_length"]["value"]));
        if (errors != null) {messages.push(errors)};
    }
    if(config.hasOwnProperty("expected_specialcharacter_count") && config["expected_specialcharacter_count"]["use"] === 1) {
        let errors = validate_expected_specialcharacter_count(attemptvalue, config["special_characters"]["value"], parseInt(config["expected_specialcharacter_count"]["value"]));
        if (errors != null) {messages.push(errors)};
    }
    if(config.hasOwnProperty("valid_characters") && config["valid_characters"]["use"] === 1) {
        let errors = validate_valid_characters(attemptvalue, config["valid_characters"]["value"] + config["special_characters"]["value"] + ["0","1","2","3","4","5","6","7","8","9"]);
        if (errors != null) {messages.push(errors)};
    }
    if(config.hasOwnProperty("expected_number_count") && config["expected_number_count"]["use"] === 1) {
        let errors = validate_expected_number_count(attemptvalue, config["expected_number_count"]["value"]);
        if (errors != null) {messages.push(errors)};
    }

    /// Error Displaying
    if (messages.length > 0) {
        if(e != null) {
            e.preventDefault();
        }
        passwordEl.classList.add('invalid');
        passwordEl.classList.remove('valid');
        passworderrorEl.innerHTML = messages2list(messages).join("\n");
        passwordEl.setCustomValidity(messages.join(", \n"));
    } else {
        passwordEl.classList.add('valid');
        passwordEl.classList.remove('invalid');
        passworderrorEl.innerHTML = null;
        passwordEl.setCustomValidity('');
    }
}

function refreshName(e = null) {
    let messages = [];
    let minlength = "<TMPL_VAR NAME='pwordlength'>";
    if (nameEl.value === '' || nameEl.value == null || nameEl.value.length < minlength) {
        messages.push('Name is required');
    }
    if (messages.length > 0) {
        if(e!=null) {
            e.preventDefault();
        }
        nameerrorEl.innerHTML = "Has to be longer than " + minlength;
        nameEl.classList.add('invalid');
        nameEl.classList.remove('valid');
        nameEl.setCustomValidity('Has to be longer than ' + minlength);
    } else {
        nameerrorEl.innerHTML = null;
        nameEl.classList.add('valid');
        nameEl.classList.remove('invalid');
        nameEl.setCustomValidity('');
    }
}

/// Attach the Refresh-Functions to the input events of the Inputfields
nameEl.addEventListener('input', (e) => {
    refreshName(e);
});

repeatEl.addEventListener('input', (e) => {
    refreshRepeatedPassword(e);
});

passwordEl.addEventListener('input', (e) => {
    refreshRepeatedPassword(e);
    refreshPassword(e);
});

/// Functions to validate the different Config-Parameters and return the respective Errors
function validate_minimum_length(password, length) {
    return password.length >= length ? null : "Password has to be longer than " + length;
}

function validate_expected_specialcharacter_count(password, special_characters, count) {
    let foundCount = 0;
    for(let i = 0; i < password.length; i ++) {
        if(special_characters.includes(password[i])) {
            foundCount ++;
        }
    }
    return foundCount >= count ? null : "Password needs to contain " +  (count - foundCount) + " more special Characters (" + special_characters + ")";
}

function validate_valid_characters(password, valid_characters) {
    
    for(let i = 0; i < password.length; i ++) {
        if(!valid_characters.includes(password[i])) {
            return "Password contains non-permitted Character: " + password[i];
        }
    }
}

function validate_expected_number_count(password, count) {
    numbers = ["0","1","2","3","4","5","6","7","8","9"];
    let foundCount = 0;
    for(let i = 0; i < password.length; i ++) {
        if(numbers.includes(password[i])) {
            foundCount ++;
        }
    }
    return foundCount >= count ? null : "Password needs to contain " +  (count - foundCount) + " more numbers.";
}

/// Refreshing each Inputs errors once when the site is loaded
refreshRepeatedPassword();
refreshPassword();
refreshName();
</script>